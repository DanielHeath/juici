#!/usr/bin/env ruby
require 'net/http'
require 'json'
require 'juici/interface'

# TODO Refactor
def main(args)
  action = (args.shift || "help").to_sym
  options = {
    callbacks: []
  }

  until args.empty?
    case args.shift
    when "--command"
      command = args.shift
      options[:command] = if command == "-"
        STDIN.read
      else
        command
      end
    when "--host"
      options[:host] = args.shift
    when "--title"
      options[:title] = args.shift
    when "--project"
      options[:project] = args.shift
    when "--priority"
      options[:priority] = args.shift
    when "--callback"
      options[:callbacks] << args.shift
    end
  end

  send(action, options)
end

def build(opts)
  host = URI(opts[:host])
  Net::HTTP.start(host.host, host.port) do |h|
    req = Net::HTTP::Post.new(Juici::Routes::NEW_BUILD)
    req.body = _create_payload(opts)
    h.request req
  end
end

def help(opts)
  [
    "Usage #{$0} <build|help>",
    "  build: --host <host>",
    "       : --title <title>",
    "       : --project <project>",
    "       : --priority <priority>",
    "       : --callback <callback>",
  ].each do |line|
    STDERR.puts(line)
  end
end

def _create_payload(opts)
  URI.encode_www_form({
    "project" => opts[:project],
    "environment" => (opts[:environment] || {}).to_json,
    "command" => opts[:command],
    "priority" => opts[:priority] || 1,
    "callbacks" => (opts[:callbacks] || []).to_json,
    "title" => opts[:title]
  })
end

main(ARGV.dup)
